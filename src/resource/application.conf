play {
  http.secret.key = "abra-cadabra-sim-salabim"

  i18n.langs = ["en"]

  application.loader = "com.mycomp.sh.platform.configuration.ApplicationLoader"

  http {
    filters = "com.mycomp.sh.platform.configuration.ApplicationFilters"
    errorHandler = "com.mycomp.sh.platform.configuration.ErrorHandler"

    # trust all proxies because of unknown AWS proxy IP address
    forwarded.trustedProxies = ["0.0.0.0/0", "::/0"]
  }

  modules.enabled += "com.mycomp.sh.platform.configuration.MainModule"

  ws {
    followRedirects = false
    useProxyProperties = false
    timeout {
      connection = 3s
      idle = 30s
      request = 30s
    }
  }
}



akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    serializers {
      java = "akka.serialization.JavaSerializer"
    }
    serialization-bindings {
      "java.io.Serializable" = java
    }

    // java serialization is used for akka remoting
    allow-java-serialization = on
    warn-about-java-serializer-usage = off
    enable-additional-serialization-bindings = on
  }

  remote {
    log-remote-lifecycle-events = off
    retry-gate-closed-for = 30s
    netty.tcp.port = 8353
  }

  http {
    host-connection-pool {
      max-connections = 16
      max-retries = 0
      max-open-requests = 32
      client {
        connecting-timeout = 5s
        idle-timeout = 10s
      }
    }
  }


  cluster.dependencies.mpa = 1
  cluster.seed-node-timeout = 60s
  cluster.singleton.singleton-name = "cluster-singleton"
  cluster.roles = ["mycomp"]
  cluster.role {
    mycomp.min-nr-of-members = 1
  }

  cluster.metrics.enabled = off
  extensions += "akka.cluster.metrics.ClusterMetricsExtension"

  cluster.use-dispatcher = akka.cluster-dispatcher
  cluster-dispatcher {
    fork-join-executor {
      parallelism-min = 2
      parallelism-max = 4
    }
  }

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  cluster.log-info = off
  log-dead-letters = 0
  }
